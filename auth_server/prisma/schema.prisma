generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model address {
  id          Int      @id @default(autoincrement())
  country     String   @db.VarChar(40)
  city        String   @db.VarChar(40)
  street      String   @db.VarChar(50)
  flat_number Int?     @db.SmallInt
  postcode    String   @db.VarChar(10)
  person      person[]
}

model app_user {
  id                                    Int                     @id @default(autoincrement()) @db.SmallInt
  password                              String                  @db.VarChar(100)
  role                                  String                  @db.VarChar(50)
  img                                   String?                 @db.VarChar(100)
  enabled                               Boolean
  account_non_expired                   Boolean?
  account_non_locked                    Boolean?
  credentials_non_expired               Boolean?
  person_id                             Int?                    @unique @db.SmallInt
  person                                person?                 @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  confirmation_token                    confirmation_token[]
  conversation                          conversation[]
  doctor_schedule                       doctor_schedule[]
  doctor_specialization                 doctor_specialization[]
  message_app_userTomessage_receiver_id message[]               @relation("app_userTomessage_receiver_id")
  message_app_userTomessage_sender_id   message[]               @relation("app_userTomessage_sender_id")
  notice                                notice[]
  patient                               patient[]
  visit                                 visit[]
}

model confirmation_token {
  id           Int       @id @default(autoincrement())
  token        String    @db.VarChar(50)
  created_at   DateTime  @db.Timestamp(6)
  expires_at   DateTime  @db.Timestamp(6)
  confirmed_at DateTime? @db.Timestamp(6)
  app_user_id  Int?      @db.SmallInt
  app_user     app_user? @relation(fields: [app_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model conversation {
  id          Int      @id @default(autoincrement())
  app_user_id Int      @db.SmallInt
  message_id  Int
  app_user    app_user @relation(fields: [app_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  message     message  @relation(fields: [message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model dispensary {
  id                        Int                         @id @default(autoincrement()) @db.SmallInt
  name                      String                      @unique @db.VarChar(50)
  dispensary_specialization dispensary_specialization[]
  referral                  referral[]
}

model dispensary_specialization {
  id                Int            @id @default(autoincrement()) @db.SmallInt
  dispensary_id     Int            @db.SmallInt
  specialization_id Int            @db.SmallInt
  dispensary        dispensary     @relation(fields: [dispensary_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  specialization    specialization @relation(fields: [specialization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model doctor_schedule {
  id          Int      @id @default(autoincrement())
  app_user_id Int      @db.SmallInt
  schedule_id Int      @db.SmallInt
  app_user    app_user @relation(fields: [app_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schedule    schedule @relation(fields: [schedule_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model doctor_specialization {
  id                Int            @id @default(autoincrement()) @db.SmallInt
  app_user_id       Int            @db.SmallInt
  specialization_id Int            @db.SmallInt
  app_user          app_user       @relation(fields: [app_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  specialization    specialization @relation(fields: [specialization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model examination {
  id        Int     @id @default(autoincrement())
  interview String?
  research  String?
  visit_id  Int     @unique
  visit     visit   @relation(fields: [visit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model examination_type {
  id   Int     @id @default(autoincrement()) @db.SmallInt
  name String? @db.VarChar(50)
}

model medication {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(50)
  description             String
  on_prescription         Boolean
  image_name              String?                   @db.VarChar(100)
  prescription_medication prescription_medication[]
}

model message {
  id                                     Int            @id @default(autoincrement())
  date                                   DateTime       @db.Timestamp(6)
  content                                String
  sender_id                              Int            @db.SmallInt
  receiver_id                            Int            @db.SmallInt
  app_user_app_userTomessage_receiver_id app_user       @relation("app_userTomessage_receiver_id", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  app_user_app_userTomessage_sender_id   app_user       @relation("app_userTomessage_sender_id", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  conversation                           conversation[]
}

model notice {
  id        Int       @id @default(autoincrement()) @db.SmallInt
  title     String    @db.VarChar(100)
  content   String
  date      DateTime  @db.Timestamp(6)
  doctor_id Int?      @db.SmallInt
  app_user  app_user? @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model patient {
  id        Int       @id @default(autoincrement()) @db.SmallInt
  pesel     String    @unique @db.Char(11)
  person_id Int?      @unique @db.SmallInt
  doctor_id Int?      @db.SmallInt
  app_user  app_user? @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person    person?   @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  visit     visit[]
}

model person {
  id          Int       @id @default(autoincrement()) @db.SmallInt
  first_name  String    @db.VarChar(20)
  second_name String?   @db.VarChar(20)
  last_name   String    @db.VarChar(40)
  birthdate   DateTime  @db.Date
  email       String    @unique @db.VarChar(30)
  phone       String    @db.VarChar(15)
  address_id  Int?
  address     address?  @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  app_user    app_user?
  patient     patient?
}

model prescription {
  id                      Int                       @id @default(autoincrement())
  code                    String                    @db.VarChar(50)
  visit_id                Int                       @unique
  visit                   visit                     @relation(fields: [visit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prescription_medication prescription_medication[]
}

model prescription_medication {
  id              Int          @id @default(autoincrement())
  prescription_id Int
  medication_id   Int
  medication      medication   @relation(fields: [medication_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prescription    prescription @relation(fields: [prescription_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model referral {
  id                Int            @id @default(autoincrement())
  reason            String
  priority          Boolean
  dispensary_id     Int            @db.SmallInt
  specialization_id Int            @db.SmallInt
  visit_id          Int
  dispensary        dispensary     @relation(fields: [dispensary_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  specialization    specialization @relation(fields: [specialization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  visit             visit          @relation(fields: [visit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model schedule {
  id              Int               @id @default(autoincrement())
  date            DateTime          @db.Date
  start_hour      String            @db.VarChar(5)
  end_hour        String            @db.VarChar(5)
  break_duration  Int?
  visit_duration  Int
  doctor_schedule doctor_schedule[]
}

model specialization {
  id                        Int                         @id @default(autoincrement()) @db.SmallInt
  name                      String                      @unique @db.VarChar(50)
  dispensary_specialization dispensary_specialization[]
  doctor_specialization     doctor_specialization[]
  referral                  referral[]
}

model visit {
  id           Int           @id @default(autoincrement())
  date         DateTime      @db.Timestamp(6)
  finished     Boolean
  duration     Int           @db.SmallInt
  app_user_id  Int           @db.SmallInt
  patient_id   Int           @db.SmallInt
  app_user     app_user      @relation(fields: [app_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient      patient       @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  examination  examination?
  prescription prescription?
  referral     referral[]
}
